name: CI (Windows)

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string

env:
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  windows:
    name: CI

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup vcpkg caching
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
          core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite')

    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg ${{ runner.temp }}\vcpkg
        ${{ runner.temp }}\vcpkg\bootstrap-vcpkg.bat -disableMetrics

    - name: Install dependencies using vcpkg
      run: |
        ${{ runner.temp }}\vcpkg\vcpkg install curl  # Ensure CURL is installed

    - name: Install OpenGFX
      shell: bash
      run: |
        mkdir -p "C:/Users/Public/Documents/OpenTTD/baseset"
        cd "C:/Users/Public/Documents/OpenTTD/baseset"

        echo "::group::Download OpenGFX"
        curl -L https://cdn.openttd.org/opengfx-releases/0.6.0/opengfx-0.6.0-all.zip -o opengfx-all.zip
        echo "::endgroup::"

        echo "::group::Unpack OpenGFX"
        unzip opengfx-all.zip
        echo "::endgroup::"

        rm -f opengfx-all.zip

    - name: Install MSVC problem matcher
      uses: ammaraskar/msvc-problem-matcher@master

    - name: Configure developer command prompt for ${{ inputs.arch }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ inputs.arch }}

    - name: Build
      shell: bash
      env:
        NINJA_STATUS: "[%f/%t -- %e] " # [finished_edges/total_edges -- elapsed_time], default value is "[%f/%t] "
      run: |
        mkdir build
        cd build

        echo "::group::CMake"
        cmake .. \
          -GNinja \
          -DVCPKG_TARGET_TRIPLET=${{ inputs.arch }}-windows-static \
          -DCMAKE_TOOLCHAIN_FILE="${{ runner.temp }}\vcpkg\scripts\buildsystems\vcpkg.cmake" \
          -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=YES \  # Add this to export all DLL symbols
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON  # Ensure we're building a shared library (DLL)
        echo "::endgroup::"

        echo "::group::Build"
        cmake --build . --config Release  # Use Release configuration to build the DLL
        echo "::endgroup::"

    - name: Upload DLL as artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-dll-artifact
        path: build/*.dll  # Adjust the path to match where your DLL is located (it may differ depending on your CMake configuration)

    - name: Test
      shell: bash
      run: |
        cd build
        ctest --timeout 120
